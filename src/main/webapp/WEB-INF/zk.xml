<?xml version="1.0" encoding="UTF-8"?>
<zk>
    <session-config>
            <device-type>ajax</device-type>    
            <timeout-uri></timeout-uri>    
    </session-config>
    <client-config>
        <debug-js>true</debug-js>
    </client-config>
    <library-property>
        <name>org.zkoss.web.classWebResource.cache</name>
        <value>false</value>
    </library-property>
    <client-config>
        <data-handler>
                <name>chartist-pie</name>
            <link rel="stylesheet" href="/chartist/scripts/chartist.min.css"/>
            <script src="/chartist/scripts/chartist.min.js"></script>
            <script src="/chartist/scripts/matchMedia.js"></script>
            <script src="/chartist/scripts/matchMedia.addListener.js"></script>
                <script>
                        function (wgt, dataValue) {
                                var renderChart = function(value) {
                                        wgt.$setValue('');
                                        wgt.chart = new Chartist.Pie(wgt.$n(), {series: [parseFloat(value)], labels: [value]}, dataValue); 
                                };
                                wgt.setOverride("setValue", renderChart); 
                                renderChart(wgt.getValue());
                                wgt.listen({onAfterSize: function() {wgt.chart.update();}});
                        }
                </script>
        </data-handler>
        <data-handler>
            <name>qrcode</name>
            <script src="/qrcode/js/jquery.min.js"></script>
            <script src="/qrcode/js/qrcode.js"></script>
            <script src="/qrcode/js/qrcode.min.js"></script>
            <script>
                function (wgt, option) {
                    wgt.field = option;
                    if (wgt.getWidth()==null) {
                        wgt.width = '256';
                    } else {
                        wgt.width = wgt.getWidth();
                    }
                    if (wgt.getHeight()==null) {
                        wgt.height = '256';
                    } else {
                        wgt.height = wgt.getHeight();
                    }      
                    var createqrcode = function(value) {
                        if (wgt.qrcode!=null) {
                            wgt.qrcode.clear();
                            wgt.qrcode.makeCode(value); 
                        } else {
                            wgt.qrcode = new QRCode(wgt.$n(), {
                                                text : value,
                                                width : wgt.width,
                                                height : wgt.height});
                        }
                    }
                    wgt.setOverride('set'+ option.charAt(0).toUpperCase() + option.slice(1), createqrcode);
                    createqrcode(wgt.get(option));
                }
            </script>
        </data-handler>
        <data-handler>
            <name>qrcode-href</name>
            <script src="/qrcode/js/jquery.min.js"></script>
            <script src="/qrcode/js/qrcode.js"></script>
            <script src="/qrcode/js/qrcode.min.js"></script>
            <script>
                function (wgt, option) {
                    if (wgt.getWidth()==null) {
                        wgt.width = '256';
                    } else {
                        wgt.width = wgt.getWidth();
                    }
                    if (wgt.getHeight()==null) {
                        wgt.height = '256';
                    } else {
                        wgt.height = wgt.getHeight();
                    }      
                    var createqrcode = function(value) {
                        wgt.$setHref(value);
                        if (wgt.qrcode!=null) {
                            wgt.qrcode.clear();
                            wgt.qrcode.makeCode(value); 
                        } else {
                            wgt.qrcode = new QRCode(wgt.$n(), {
                                                text : value,
                                                width : wgt.width,
                                                height : wgt.height});
                        }
                    }
                    wgt.setOverride("setHref", createqrcode);
                    createqrcode(wgt.getHref());
                }
            </script>
        </data-handler>
        <data-handler>
            <name>qrcode-value</name>
            <script src="/qrcode/js/jquery.min.js"></script>
            <script src="/qrcode/js/qrcode.js"></script>
            <script src="/qrcode/js/qrcode.min.js"></script>
            <script>
                function (wgt, option) {
                    if (wgt.getWidth()==null) {
                        wgt.width = '256';
                    } else {
                        wgt.width = wgt.getWidth();
                    }
                    if (wgt.getHeight()==null) {
                        wgt.height = '256';
                    } else {
                        wgt.height = wgt.getHeight();
                    }  
                    var createqrcode = function(value) {
                        wgt.$setValue('');
                        if (wgt.qrcode!=null) {
                            wgt.qrcode.clear();
                            wgt.qrcode.makeCode(value); 
                        } else {
                            wgt.qrcode = new QRCode(wgt.$n(), {
                                                text : value,
                                                width : wgt.width,
                                                height : wgt.height});
                        }
                    }
                    wgt.setOverride("setValue", createqrcode);
                    createqrcode(wgt.get(option));
                }
            </script>
        </data-handler>
        <data-handler>
            <name>pdf-target</name>
            <script src="/pdfGenerator/js/jspdf.min.js"></script>
            <script src="/pdfGenerator/js/html2canvas.min.js"></script>
            <script><![CDATA[
                 (function () {
                var a4  =[ 595.28,  841.89];  // for a4 size paper width and height

                function createPDF(target) {
                    var cache_width = target.width();
                    getCanvas(target).then(function(canvas) {
                        var img = canvas.toDataURL("image/png");
                        var doc = new jsPDF({
                            unit:'px',
                            format:'a4'
                        });
                        doc.addImage(img, 'JPEG', 20, 20);
                        doc.save('test.pdf');
                        target.width(cache_width);
                    });
                }

                // create canvas object
                function getCanvas(target) {
                    target.css('max-width','none');
                        return html2canvas(target,{
                        imageTimeout:2000,
                        removeContainer:true
                    });
                }

                return function (wgt, option) {
                    jq(wgt.$n()).click(function () {
                        var w = zk.Widget.$('$' + option);
                        if (w) {
                            createPDF(jq(w.$n()));
                        }
                    });
                };
                })()
            ]]></script>
        </data-handler>
    </client-config>
</zk>
